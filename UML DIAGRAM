+-------------------+
|     Tetris        |
+-------------------+
| - FRAME_TIME      |
| - TYPE_COUNT      |
| - board           |
| - side            |
| - isPaused        |
| - isNewGame       |
| - isGameOver      |
| - level           |
| - score           |
| - random          |
| - logicTimer      |
| - currentType     |
| - nextType        |
| - currentCol      |
| - currentRow      |
| - currentRotation |
| - dropCooldown    |
| - gameSpeed       |
+-------------------+
| + Tetris()        |
| + startGame()     |
| - updateGame()    |
| - renderGame()    |
| - resetGame()     |
| - spawnPiece()    |
| - rotatePiece()   |
| # isPaused()      |
| # isGameOver()    |
| # isNewGame()     |
| # getScore()      |
| # getLevel()      |
| # getPieceType()  |
| # getNextPieceType() |
| # getPieceCol()   |
| # getPieceRow()   |
| # getPieceRotation() |
+-------------------+

+-------------------+
|    BoardPanel     |
+-------------------+
| - tetris          |
+-------------------+
| + BoardPanel(Tetris) |
| + paintComponent(Graphics) |
| + clear()         |
| + addPiece(TileType, int, int, int) |
| + checkLines()    |
| # isValidAndEmpty(TileType, int, int, int) |
+-------------------+
Fields:
COLOR_MIN and COLOR_MAX: static final integers representing the minimum and maximum color component values for tiles.
BORDER_WIDTH: static final integer representing the width of the border around the game board.
COL_COUNT: static final integer representing the number of columns on the board.
VISIBLE_ROW_COUNT: private static final integer representing the number of visible rows on the board.
HIDDEN_ROW_COUNT: private static final integer representing the number of rows that are hidden from view.
ROW_COUNT: public static final integer representing the total number of rows that the board contains.
TILE_SIZE: public static final integer representing the number of pixels that a tile takes up.
SHADE_WIDTH: public static final integer representing the width of the shading on the tiles.
CENTER_X and CENTER_Y: private static final integers representing the central x and y coordinates on the game board.
PANEL_WIDTH and PANEL_HEIGHT: public static final integers representing the total width and height of the panel.
LARGE_FONT and SMALL_FONT: private static final Font objects representing the larger and smaller fonts to display.
tetris: a reference to the Tetris object controlling the game.
tiles: a 2D array of TileType objects representing the tiles that make up the board.

Constructors:
BoardPanel(Tetris tetris): initializes the BoardPanel instance with a reference to the Tetris object and creates a new tiles array. It also sets the preferred size of the panel and the background color.

Methods:
clear(): resets the board by setting all elements in the tiles array to null.
isValidAndEmpty(TileType type, int x, int y, int rotation): checks whether a piece can be placed at specific coordinates by verifying if it is within the valid column and row range and if it conflicts with an existing tile.
addPiece(TileType type, int x, int y, int rotation): adds a piece to the game board by setting the corresponding tiles in the tiles array.
checkLines(): checks the board to see if any lines have been cleared and removes them from the game.
checkLine(int line): checks whether a specific row is full and removes it from the board.
isOccupied(int x, int y): checks if a tile is occupied at the given column and row.
setTile(int x, int y, TileType type): sets a tile at the specified column and row in the tiles array.
getTile(int x, int y): retrieves the tile at the given column and row from the tiles array.
paintComponent(Graphics g): overrides the paintComponent method to handle the custom rendering of the board, including drawing the tiles, current piece, ghost piece,

+--------------------------------------------------+
|                    SidePanel                      |
+--------------------------------------------------+
| - TILE_SIZE: int                                 |
| - SHADE_WIDTH: int                               |
| - TILE_COUNT: int                                |
| - SQUARE_CENTER_X: int                           |
| - SQUARE_CENTER_Y: int                           |
| - SQUARE_SIZE: int                               |
| - SMALL_INSET: int                               |
| - LARGE_INSET: int                               |
| - STATS_INSET: int                               |
| - CONTROLS_INSET: int                            |
| - TEXT_STRIDE: int                               |
| - SMALL_FONT: Font                               |
| - LARGE_FONT: Font                               |
| - DRAW_COLOR: Color                              |
| - tetris: Tetris                                 |
+--------------------------------------------------+
| +SidePanel(tetris: Tetris)                       |
| +paintComponent(g: Graphics): void                |
| -drawTile(type: TileType, x: int, y: int,        |
|  g: Graphics): void                              |
+--------------------------------------------------+
The SidePanel class represents a JPanel responsible for displaying various information on the game, such as the next piece, score, level, and controls. Here are the main attributes and methods:

Attributes:
TILE_SIZE: The dimensions of each tile on the next piece preview.
SHADE_WIDTH: The width of the shading on each tile on the next piece preview.
TILE_COUNT: The number of rows and columns in the preview window.
SQUARE_CENTER_X: The center x-coordinate of the next piece preview box.
SQUARE_CENTER_Y: The center y-coordinate of the next piece preview box.
SQUARE_SIZE: The size of the next piece preview box.
SMALL_INSET: The number of pixels used on a small inset.
LARGE_INSET: The number of pixels used on a large inset.
STATS_INSET: The y-coordinate of the stats category.
CONTROLS_INSET: The y-coordinate of the controls category.
TEXT_STRIDE: The number of pixels to offset between each string.
SMALL_FONT: The small font used for drawing.
LARGE_FONT: The large font used for drawing.
DRAW_COLOR: The color used to draw the text and preview box.
tetris: Reference to the Tetris game instance.

Methods:
SidePanel(tetris: Tetris): Constructor for creating a new SidePanel and setting its display properties.
paintComponent(g: Graphics): Override method to paint the component. It handles the drawing of stats, controls, and the next piece preview.
drawTile(type: TileType, x: int, y: int, g: Graphics): Helper method to draw a tile onto the


+------------------------------------------+
|                   Clock                  |
+------------------------------------------+
| - millisPerCycle: float                   |
| - lastUpdate: long                        |
| - elapsedCycles: int                      |
| - excessCycles: float                     |
| - isPaused: boolean                       |
+------------------------------------------+
| +Clock(cyclesPerSecond: float)            |
| +setCyclesPerSecond(cyclesPerSecond: float): void|
| +reset(): void                           |
| +update(): void                           |
| +setPaused(paused: boolean): void         |
| +isPaused(): boolean                      |
| +hasElapsedCycle(): boolean               |
| +peekElapsedCycle(): boolean              |
| -getCurrentTime(): long                   |
+------------------------------------------+
The Clock class is responsible for tracking the number of cycles that have elapsed over time. Here are the main attributes and methods:

Attributes:
millisPerCycle: The number of milliseconds that make up one cycle.
lastUpdate: The last time that the clock was updated (used for calculating the delta time).
elapsedCycles: The number of cycles that have elapsed.
excessCycles: The amount of excess time towards the next elapsed cycle.
isPaused: Flag indicating whether the clock is paused.

Methods:
Clock(cyclesPerSecond: float): Constructor for creating a new Clock and setting its cycles-per-second.
setCyclesPerSecond(cyclesPerSecond: float): Sets the number of cycles that elapse per second.
reset(): Resets the clock stats. Elapsed cycles and cycle excess will be reset to 0. The last update time will be reset to the current time, and the paused flag will be set to false.
update(): Updates the clock stats. The number of elapsed cycles, as well as the cycle excess, will be calculated only if the clock is not paused.
setPaused(paused: boolean): Pauses or unpauses the clock. While paused, the clock will not update elapsed cycles or cycle excess.
isPaused(): boolean: Checks if the clock is currently paused.
hasElapsedCycle(): boolean: Checks if a cycle has elapsed for the clock. If it has, the number of elapsed cycles will be decremented by one.
peekElapsedCycle(): boolean: Checks if a cycle has elapsed for the clock yet. The number of cycles will not be decremented if the number of elapsed cycles is greater than 0.
getCurrentTime(): long: Calculates the current time in milliseconds using the computer's high-resolution clock.

------------------------------------
|           TileType               |
------------------------------------
| - baseColor: Color               |
| - lightColor: Color              |
| - darkColor: Color               |
| - spawnCol: int                  |
| - spawnRow: int                  |
| - dimension: int                 |
| - rows: int                      |
| - cols: int                      |
| - tiles: boolean[][]             |
------------------------------------
| + getBaseColor(): Color          |
| + getLightColor(): Color         |
| + getDarkColor(): Color          |
| + getDimension(): int            |
| + getSpawnColumn(): int          |
| + getSpawnRow(): int             |
| + getRows(): int                 |
| + getCols(): int                 |
| + isTile(int, int, int): boolean |
| + getLeftInset(int): int         |
| + getRightInset(int): int        |
| + getTopInset(int): int          |
| + getBottomInset(int): int       |
------------------------------------

